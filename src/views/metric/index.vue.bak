<script setup lang="ts">
import { ref, computed } from 'vue';
import { Icon } from '@iconify/vue';
import { useAppStore } from '@/store/modules/app';
import MetricCard from './modules/MetricCard.vue'
import { fetchCardData } from '@/data/cardData'


const appStore = useAppStore();
const column = computed(() => (appStore.isMobile ? 1 : 4));
// const column = 4;
const objectValue = ref('')
const showTypesselected = ref('')
const showTypes = [
    { value: '不限', label: '不限' },
    { value: '我创建的', label: '我创建的' },
    { value: '我收藏的', label: '我收藏的' }
]

const PublishSelected = ref('')

const isPublishs = [
    { value: '不限', label: '不限' },
    { value: '已发布', label: '已发布' },
    { value: '未发布', label: '未发布' }
]

const sensitivitySelected = ref('')
const sensitivitys = [
    { value: '不限', label: '不限' },
    { value: '普通', label: '普通' },
    { value: '重要', label: '重要' },
    { value: '核心', label: '核心' }
]
// const firstCards = (await fetchCardData())[0]
</script>

<template>
    <n-layout>
        <n-layout-header>
            <n-flex vertical :size='20' justify='center'>
                <n-flex justify="center">
                    <n-input size="large" round placeholder="搜索" style="width: 75%;">
                        <template #suffix>
                            <n-icon></n-icon>
                        </template>
                    </n-input>
                </n-flex>
                <n-flex justify="space-evenly" align="center">
                    <div class="select-text">主题域</div>
                    <n-select v-model:value="objectValue" style="width: 15%;" placeholder="请选择主题域" />
                    <div class="select-text">展示类型</div>
                    <n-radio-group v-model:value="showTypesselected" name="radiobuttongroup">
                        <n-radio-button v-for="showType in showTypes" :key="showType.value" :value="showType.value"
                            :label="showType.label" />
                    </n-radio-group>
                    <div class="select-text">是否发布</div>
                    <n-radio-group v-model:value="PublishSelected" name="radiobuttongroup">
                        <n-radio-button v-for="isPublish in isPublishs" :key="isPublish.value" :value="isPublish.value"
                            :label="isPublish.label" />
                    </n-radio-group>
                    <div class="select-text">敏感度</div>
                    <n-radio-group v-model:value="sensitivitySelected" name="radiobuttongroup">
                        <n-radio-button v-for="sensitivity in sensitivitys" :key="sensitivity.value"
                            :value="sensitivity.value" :label="sensitivity.label" />
                    </n-radio-group>
                </n-flex>
            </n-flex>
        </n-layout-header>
        <n-divider />
        <n-layout-content>
            <!-- <MetricCard :cardData="firstCards"></MetricCard> -->
            <!-- <div class="card-container" :style="{ gridTemplateColumns: `repeat(${column}, 1fr)` }">
                <n-card v-for="item in cards" :key="item.id" class="card" :title="item.title">
                    <p class="card-content">{{ item.content }}</p>
                    <div class="chart-container" :id="`chart-${item.id}`"></div>
                    <div class="tags">
                        <span class="tag" v-for="tag in item.tags" :key="tag">{{ tag }}</span>
                    </div>
                </n-card>
                </div> -->
        </n-layout-content>
    </n-layout>
    <n-float-button style="background-color: red; color: white;" :right="50" :bottom="50" :height='64' :width="64"
        type="primary">
        <n-icon size="30">
            <Icon icon="mdi:plus" />
        </n-icon>
    </n-float-button>
</template>


<style scoped>
.n-layout {
    top: 30px;
    background-color: transparent;
    /* 你可以根据需要更改颜色 */
}

.n-layout-header {
    background-color: transparent;
    /* 你可以根据需要更改颜色 */
}

.select-text {
    color: #767676;
    font-size: 12px;
    /* 你可以根据需要更改间距 */
}

.card-container {
    display: grid;
    /* grid-template-columns: repeat(column, 1fr); */
    gap: 46px;
    /* 卡片之间的间距 */
    max-width: 1500px;
    /* 最大宽度 */
    margin: 0 auto;
    /* 居中 */
}

.card {
    border-radius: 10px;
    box-shadow: 0px 4px 16px 0px rgba(0, 0, 0, 0.16);
    width: 343px;
    height: 180px;
    /* 卡片高度 */
}

.card-content {
    font-family: Source Han Sans;
    font-size: 30px;
    font-weight: 500;
    letter-spacing: 0px;
}

.tags {
    position: absolute;
    bottom: 10px;
    /* 距离底部10px */
    left: 10px;
    /* 距离左边10px */
}

.tag {
    display: inline-block;
    background-color: #F8F9FB;
    /* 标签背景颜色 */
    color: #3D3D3D;
    /* 标签文字颜色 */
    padding: 2px 5px;
    /* 内边距 */
    border-radius: 3px;
    /* 圆角 */
    margin-right: 5px;
    /* 标签间距 */
}

.chart-container {
    position: absolute;
    left: 120px;
    top: -30px;
    align-items: center;
    /* 垂直居中 */
    width: 220px;
    height: 250px;
}
</style>
